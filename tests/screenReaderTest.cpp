#include "pch.h"
#include "../src/screenReader.cpp"

TEST(ScreenReader, readIsAlive) {
	Beginner beginner;
	ScreenReader scr(beginner,nullptr);

	//the initial smiley
	std::string imageName = "isalive_init.png";
	bool alive = scr.readIsAlive(imageName,true);
	EXPECT_TRUE(alive);
	
	//the smiley after we lose a game
	std::string imageName2 = "isalive_lost.png";
	bool alive2 = scr.readIsAlive(imageName2,true);
	EXPECT_FALSE(alive2);

	//the smiley after we won a game
	std::string imageName3 = "isalive_won.png";
	bool alive3 = scr.readIsAlive(imageName3,true);
	EXPECT_FALSE(alive3);

}

TEST(ScreenReader, readIsWon) {
	Beginner beginner;
	ScreenReader scr(beginner,nullptr);

	//the initial smiley
	std::string imageName = "isalive_init.png";
	bool alive = scr.readIsWon(imageName, 1.00, true);
	EXPECT_FALSE(alive);

	//the smiley after we lose a game
	std::string imageName2 = "isalive_lost.png";
	bool alive2 = scr.readIsWon(imageName2,1.00, true);
	EXPECT_FALSE(alive2);

	//the smiley after we won a game
	std::string imageName3 = "isalive_won.png";
	bool alive3 = scr.readIsWon(imageName3,1.00, true);
	EXPECT_TRUE(alive3);
};

TEST(ScreenReader, readMinefield) {
	Beginner beginner;
	ScreenReader scr(beginner,nullptr);

	//beginner game, initial state
	std::string imageName = "beginner_init.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};
	EXPECT_EQ(minefield,minefieldTest);
	
	//beginner game, ingame state
	std::string imageName2 = "beginner_ingame.png";
	std::vector<std::vector<Square>> minefield2 = scr.readMinefield(imageName2, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest2 = {
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, ONE, ZERO },
		{ UNKNOWN, UNKNOWN, TWO, ONE, TWO, FLAGGED, TWO, ONE },
		{ UNKNOWN, UNKNOWN, TWO, ONE, ONE, TWO, FLAGGED, ONE },
		{ ONE, TWO, FLAGGED, ONE, ZERO, ONE, ONE, ONE },
		{ ZERO, ONE, ONE, ONE, ZERO, ZERO, ZERO, ZERO },
		{ ONE, ONE, ZERO, ZERO, ZERO, ZERO, ONE, ONE },
		{ FLAGGED, TWO, ONE, ZERO, ZERO, ZERO, ONE, FLAGGED },
		{ UNKNOWN, FLAGGED, ONE, ZERO, ZERO, ZERO, ONE, ONE }
	};
	EXPECT_EQ(minefield2, minefieldTest2);
	/*
	//beginner game, finished state
	std::string filePath3 = "D:/Solver/Solver/resources/test_images/beginner_won.png";
	std::vector<std::vector<Square>> minefield3 = scr.readMinefield(filePath3);
	std::vector<std::vector<Square>> minefieldTest3 = {
		{ONE	,ONE	,ONE	,TWO	,FLAGGED,THREE	,FLAGGED,ONE	},
		{ONE	,FLAGGED,ONE	,TWO	,FLAGGED,FOUR	,TWO	,TWO	},
		{TWO	,TWO	,ONE	,ONE	,ONE	,TWO	,FLAGGED,ONE	},
		{FLAGGED,ONE	,ZERO	,ZERO	,ZERO	,TWO	,TWO	,TWO	},
		{ONE	,TWO	,ONE	,ONE	,ZERO	,ONE	,FLAGGED,TWO	},
		{ZERO	,ONE	,FLAGGED,ONE	,ZERO	,ONE	,THREE	,FLAGGED},
		{ZERO	,ONE	,ONE	,ONE	,ZERO	,ZERO	,TWO	,FLAGGED},
		{ZERO	,ZERO	,ZERO	,ZERO	,ZERO	,ZERO	,ONE	,ONE	}
	};
	EXPECT_EQ(minefield3, minefieldTest3);

	//intermediate game, initial state
	std::string filePath4 = "D:/Solver/Solver/resources/test_images/intermediate_init.png";
	std::vector<std::vector<Square>> minefield4 = scr.readMinefield(filePath4);
	std::vector<std::vector<Square>> minefieldTest4 = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};
	EXPECT_EQ(minefield4, minefieldTest4);

	//intermediate game, ingame state
	std::string filePath5 = "D:/Solver/Solver/resources/test_images/intermediate_ingame.png";
	std::vector<std::vector<Square>> minefield5 = scr.readMinefield(filePath5);
	std::vector<std::vector<Square>> minefieldTest5 = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,THREE  ,ONE    ,ONE    },
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,TWO    ,ONE    ,TWO    ,FLAGGED,UNKNOWN,UNKNOWN,UNKNOWN,TWO    ,ZERO   ,ZERO   },
		{UNKNOWN,UNKNOWN,THREE  ,ONE    ,TWO    ,ONE    ,ONE    ,ZERO   ,ONE    ,ONE    ,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,ZERO   },
		{UNKNOWN,UNKNOWN,TWO    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ZERO   },
		{UNKNOWN,UNKNOWN,ONE    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    },
		{UNKNOWN,UNKNOWN,TWO    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED},
		{UNKNOWN,UNKNOWN,TWO    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,UNKNOWN},
		{UNKNOWN,UNKNOWN,THREE  ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,TWO    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,TWO    ,FLAGGED,TWO    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,TWO    ,ONE    ,ONE    ,ZERO   ,ONE    ,TWO    ,TWO    ,TWO    ,ONE    ,ONE    ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,FLAGGED,ONE    ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,FLAGGED,TWO    ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN},
		{FLAGGED,TWO    ,ONE    ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,ONE    ,ONE    ,ONE    ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ONE    ,ONE    ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,ONE    ,ZERO   ,ZERO   ,ZERO   ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,ONE    ,ZERO   ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};
	EXPECT_EQ(minefield5, minefieldTest5);

	//intermediate game, finished state
	std::string filePath6 = "D:/Solver/Solver/resources/test_images/intermediate_won.png";
	std::vector<std::vector<Square>> minefield6 = scr.readMinefield(filePath6);
	std::vector<std::vector<Square>> minefieldTest6 = {
		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,TWO    ,TWO    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   },
		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,TWO    ,FLAGGED,FLAGGED,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO   },
		{ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    ,ONE    ,ONE    ,TWO    ,TWO    ,TWO    ,ONE    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    },
		{ONE    ,ONE    ,TWO    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,TWO    ,TWO    ,ONE    ,ONE    ,FLAGGED,ONE    },
		{ONE    ,FLAGGED,TWO    ,ONE    ,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,FLAGGED,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    },
		{ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ZERO   ,ONE    ,THREE  ,FOUR   ,THREE  ,ONE    ,TWO    ,FLAGGED},
		{ZERO   ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,TWO    ,TWO    ,ONE    ,ZERO   ,TWO    ,FLAGGED,FLAGGED,ONE    ,TWO    ,FLAGGED},
		{ZERO   ,ONE    ,FLAGGED,TWO    ,ONE    ,ZERO   ,ONE    ,FLAGGED,TWO    ,ONE    ,THREE  ,FLAGGED,THREE  ,ONE    ,ONE    ,ONE    },
		{TWO    ,THREE  ,THREE  ,FLAGGED,TWO    ,ONE    ,ONE    ,ONE    ,THREE  ,FLAGGED,THREE  ,ONE    ,TWO    ,ONE    ,TWO    ,ONE    },
		{FLAGGED,FLAGGED,THREE  ,TWO    ,FLAGGED,TWO    ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,FLAGGED,TWO    ,FLAGGED},
		{THREE  ,FLAGGED,TWO    ,ONE    ,TWO    ,THREE  ,FLAGGED,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,TWO    ,TWO    ,THREE  ,ONE    },
		{TWO    ,TWO    ,ONE    ,ZERO   ,ONE    ,FLAGGED,TWO    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,TWO    ,FLAGGED,THREE  ,ONE    },
		{FLAGGED,THREE  ,TWO    ,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,THREE  ,FLAGGED,FLAGGED,ONE    },
		{TWO    ,FLAGGED,FLAGGED,ONE    ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,FLAGGED,TWO    ,FLAGGED,TWO    ,THREE  ,THREE  ,TWO    },
		{TWO    ,THREE  ,TWO    ,ONE    ,ONE    ,FLAGGED,TWO    ,FLAGGED,THREE  ,TWO    ,THREE  ,ONE    ,ONE    ,ONE    ,FLAGGED,ONE    },
		{FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    }
	};

	EXPECT_EQ(minefield6, minefieldTest6);

	//expert game, initial state
	std::string filePath7 = "D:/Solver/Solver/resources/test_images/expert_init.png";
	std::vector<std::vector<Square>> minefield7 = scr.readMinefield(filePath7);
	std::vector<std::vector<Square>> minefieldTest7 = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};

	EXPECT_EQ(minefield7, minefieldTest7);

	//expert game, ingame state
	std::string filePath8 = "D:/Solver/Solver/resources/test_images/expert_ingame.png";
	std::vector<std::vector<Square>> minefield8 = scr.readMinefield(filePath8);
	std::vector<std::vector<Square>> minefieldTest8 = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,THREE  ,TWO    ,ZERO   ,ZERO   ,TWO    ,FLAGGED,THREE  ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,FOUR   ,TWO    ,FLAGGED,TWO    ,ONE    ,TWO    ,FOUR   ,FLAGGED,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,THREE  ,FLAGGED,THREE  ,TWO    ,TWO    ,FOUR   ,FLAGGED,THREE  ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,FLAGGED,FLAGGED,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,FOUR   ,TWO    ,ZERO   ,ZERO   ,TWO    ,FLAGGED,TWO    ,ONE    ,TWO    ,FOUR   ,THREE  ,THREE  ,TWO    ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FOUR   ,FLAGGED,FLAGGED,ONE    ,ZERO   ,ZERO   ,TWO    ,TWO    ,THREE  ,TWO    ,FLAGGED,FLAGGED,FLAGGED,ONE    ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ONE    ,TWO    ,TWO    ,THREE  ,TWO    ,TWO    ,FLAGGED,FOUR   ,THREE  ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,THREE  ,FLAGGED,FOUR   ,THREE  ,TWO    ,TWO    ,TWO    ,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,THREE  ,THREE  ,FOUR   ,FLAGGED,TWO    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,FLAGGED,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,FLAGGED,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,TWO    ,THREE  ,THREE  ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,ONE    ,ONE    ,TWO    ,THREE  ,THREE  ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ZERO   ,ONE    ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,FLAGGED,TWO    ,TWO    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,ZERO   ,ONE    ,ONE    ,TWO    ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ONE    ,TWO    ,FLAGGED,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,THREE  ,FLAGGED,THREE  ,ONE    ,ONE    ,ONE    ,FLAGGED,FLAGGED,TWO    ,ZERO   ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{FLAGGED,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,THREE  ,FLAGGED,TWO    ,ZERO   ,ZERO   ,TWO    ,FIVE   ,FLAGGED,THREE  ,ONE    ,TWO    ,FLAGGED,TWO    ,ONE    ,ONE    ,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ONE    ,ONE    ,ZERO   ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,FLAGGED,THREE  ,TWO    ,TWO    ,ONE    ,ONE    ,ONE    ,FLAGGED,FLAGGED,TWO    ,TWO    ,FLAGGED,THREE  ,ONE    ,ONE    ,ONE    ,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{ONE    ,TWO    ,ONE    ,THREE  ,FLAGGED,THREE  ,ONE    ,TWO    ,THREE  ,FLAGGED,ONE    ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,THREE  ,FLAGGED,FOUR   ,ONE    ,TWO    ,FLAGGED,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{FLAGGED,TWO    ,FLAGGED,THREE  ,FLAGGED,FLAGGED,ONE    ,ONE    ,FLAGGED,TWO    ,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,TWO    ,FLAGGED,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};
	EXPECT_EQ(minefield8, minefieldTest8);
	
	//expert game, finished state
	std::string filePath9 = "D:/Solver/Solver/resources/test_images/expert_won.png";
	std::vector<std::vector<Square>> minefield9 = scr.readMinefield(filePath9);
	std::vector<std::vector<Square>> minefieldTest9 = {
		{ONE    ,TWO    ,FLAGGED,FLAGGED,ONE    ,ONE    ,ONE    ,ONE    ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,TWO    ,TWO    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,ONE    ,ONE    ,ONE    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   },
		{FLAGGED,THREE  ,THREE  ,THREE  ,TWO    ,TWO    ,FLAGGED,ONE    ,TWO    ,THREE  ,THREE  ,THREE  ,FLAGGED,FLAGGED,THREE  ,FLAGGED,THREE  ,TWO    ,ZERO   ,ZERO   ,TWO    ,FLAGGED,THREE  ,TWO    ,TWO    ,ONE    ,ZERO   ,ONE    ,ONE    ,ONE    },
		{TWO    ,THREE  ,FLAGGED,ONE    ,ONE    ,FLAGGED,TWO    ,TWO    ,TWO    ,FLAGGED,FLAGGED,THREE  ,FLAGGED,FLAGGED,FOUR   ,TWO    ,FLAGGED,TWO    ,ONE    ,TWO    ,FOUR   ,FLAGGED,FOUR   ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    },
		{FLAGGED,TWO    ,ONE    ,ONE    ,ONE    ,TWO    ,THREE  ,THREE  ,FLAGGED,THREE  ,TWO    ,TWO    ,FOUR   ,FLAGGED,THREE  ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,FLAGGED,FLAGGED,THREE  ,ONE    ,ONE    ,ZERO   ,ZERO   ,TWO    ,TWO    ,TWO    },
		{TWO    ,THREE  ,ONE    ,TWO    ,ONE    ,TWO    ,FLAGGED,FLAGGED,FOUR   ,TWO    ,ZERO   ,ZERO   ,TWO    ,FLAGGED,TWO    ,ONE    ,TWO    ,FOUR   ,THREE  ,THREE  ,TWO    ,TWO    ,ONE    ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,FLAGGED,TWO    },
		{FLAGGED,TWO    ,FLAGGED,TWO    ,FLAGGED,THREE  ,FOUR   ,FLAGGED,FLAGGED,ONE    ,ZERO   ,ZERO   ,TWO    ,TWO    ,THREE  ,TWO    ,FLAGGED,FLAGGED,FLAGGED,ONE    ,ZERO   ,ONE    ,ONE    ,TWO    ,FLAGGED,FOUR   ,FLAGGED,FOUR   ,THREE  ,FLAGGED},
		{ONE    ,TWO    ,TWO    ,THREE  ,TWO    ,TWO    ,FLAGGED,FOUR   ,THREE  ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,THREE  ,FLAGGED,FOUR   ,THREE  ,TWO    ,TWO    ,TWO    ,THREE  ,FLAGGED,THREE  ,THREE  ,FLAGGED,FLAGGED,FIVE   ,FLAGGED,THREE  },
		{ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,FLAGGED,ONE    ,ZERO   ,ZERO   ,ONE    ,THREE  ,THREE  ,FOUR   ,FLAGGED,TWO    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,FLAGGED,THREE  ,FLAGGED,TWO    ,TWO    ,THREE  ,FLAGGED,FLAGGED,TWO    },
		{ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,FLAGGED,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,TWO    ,THREE  ,THREE  ,TWO    ,TWO    ,TWO    ,ONE    ,ONE    ,TWO    ,THREE  ,TWO    },
		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,ONE    ,ONE    ,TWO    ,THREE  ,THREE  ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,FLAGGED,ONE    ,ONE    ,ONE    ,TWO    ,FLAGGED},
		{ZERO   ,ONE    ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,FLAGGED,TWO    ,TWO    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,ZERO   ,ONE    ,ONE    ,TWO    ,TWO    ,FLAGGED,THREE  ,TWO    ,TWO    ,FLAGGED,TWO    ,ONE    },
		{ONE    ,TWO    ,FLAGGED,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,THREE  ,FLAGGED,THREE  ,ONE    ,ONE    ,ONE    ,FLAGGED,FLAGGED,TWO    ,ZERO   ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,THREE  ,FLAGGED,THREE  ,ONE    ,ONE    ,ZERO   },
		{FLAGGED,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,THREE  ,FLAGGED,TWO    ,ZERO   ,ZERO   ,TWO    ,FIVE   ,FLAGGED,THREE  ,ONE    ,TWO    ,FLAGGED,TWO    ,ONE    ,ONE    ,THREE  ,FLAGGED,FOUR   ,ONE    ,ONE    ,ZERO   },
		{ONE    ,ONE    ,ZERO   ,ONE    ,ONE    ,ONE    ,ZERO   ,ONE    ,FLAGGED,THREE  ,TWO    ,TWO    ,ONE    ,ONE    ,ONE    ,FLAGGED,FLAGGED,TWO    ,TWO    ,FLAGGED,THREE  ,ONE    ,ONE    ,ONE    ,THREE  ,FLAGGED,THREE  ,FLAGGED,TWO    ,ONE    },
		{ONE    ,TWO    ,ONE    ,THREE  ,FLAGGED,THREE  ,ONE    ,TWO    ,THREE  ,FLAGGED,ONE    ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,THREE  ,FLAGGED,FOUR   ,ONE    ,TWO    ,FLAGGED,TWO    ,ONE    ,THREE  ,TWO    ,THREE  ,FLAGGED},
		{FLAGGED,TWO    ,FLAGGED,THREE  ,FLAGGED,FLAGGED,ONE    ,ONE    ,FLAGGED,TWO    ,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,TWO    ,FLAGGED,THREE  ,FLAGGED,TWO    ,ONE    ,ONE    ,ZERO   ,ONE    ,FLAGGED,TWO    ,ONE    }
	};
	EXPECT_EQ(minefield9, minefieldTest9);
	*/
}

TEST(ScreenReader, getMinefieldDifference) {

	//there is no difference between the two minefields
	Beginner beginner;
	ScreenReader scr(beginner,nullptr);

	std::vector<std::vector<Square>> minefield1 {
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN }
	};

	std::vector<std::vector<Square>> minefield2 {
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN }
	};

	std::vector<std::pair<int, int>> result = scr.getMinefieldDifference(minefield1,minefield2);
	EXPECT_EQ(result.size(), 0);

	//there is difference between the two minefields
	Beginner beginner1;
	ScreenReader screenReader2(beginner1,nullptr);

	std::vector<std::vector<Square>> minefield3 {
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, ONE,     ZERO	 },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, ONE,	 ONE	 },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, ONE,	 ONE,	  ONE,	   ONE,		ONE,     ONE	 },
		{ UNKNOWN, UNKNOWN, TWO,	 ZERO,	  ZERO,	   ZERO,    ZERO,	 ZERO	 },
		{ UNKNOWN, UNKNOWN, ONE,	 ZERO,	  ZERO,	   ZERO,    ZERO,    ZERO	 }
	};

	std::vector<std::vector<Square>> minefield4 {
		{ ZERO,    ZERO,	ZERO,	 ONE,	  UNKNOWN, UNKNOWN, ONE,	 ZERO	 },
		{ ONE,	   ONE,		ZERO,	 ONE,	  UNKNOWN, UNKNOWN, ONE,	 ONE	 },
		{ UNKNOWN, TWO,		ONE,	 ONE,	  UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, ONE,	 ONE,	  ONE,	   ONE,		ONE,	 ONE	 },
		{ UNKNOWN, UNKNOWN, TWO,     ZERO,    ZERO,    ZERO,    ZERO,    ZERO	 },
		{ UNKNOWN, UNKNOWN, ONE,	 ZERO,	  ZERO,	   ZERO,	ZERO,	 ZERO	 }
	};

	std::vector<std::pair<int, int>> result1 = screenReader2.getMinefieldDifference(minefield3, minefield4);
	std::vector<std::pair<int, int>> result1Test = { {0,0},{0,1},{0,2},{0,3},{1,0},{1,1},{1,2},{1,3},{2,1},{2,2},{2,3} };

	EXPECT_EQ(result1, result1Test);
}

TEST(ScreenReader, isInitial) {
	/*
	Beginner beginner;
	ScreenReader scr_1(beginner,nullptr);

	std::string imageName1 = "beginner_init.png";
	std::string imageName2 = "beginner_ingame.png";

	EXPECT_TRUE(scr_1.isMinefieldInitial(imageName1,true));
	EXPECT_FALSE(scr_1.isMinefieldInitial(imageName2,true));
	*/


	Beginner beginner;
	ScreenReader scr(beginner, nullptr);
	std::string imageName = "beginner_init_125.png";
	EXPECT_TRUE(scr.isMinefieldInitial(imageName, 1.25, true));
};



//100% SCREEN MAGNIFICATION
TEST(ScreenReader, readMinefield_beginner_init_100) {
	Beginner beginner;
	ScreenReader scr(beginner, nullptr);

	std::string imageName = "beginner_init_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_beginner_ingame_100) {
	Beginner beginner;
	ScreenReader scr(beginner, nullptr);

	std::string imageName = "beginner_ingame_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest = {
		{ UNKNOWN,		UNKNOWN,	UNKNOWN,	UNKNOWN,	UNKNOWN,	UNKNOWN,	ONE,		ZERO },
		{ UNKNOWN,		UNKNOWN,	TWO,		ONE,		TWO,		FLAGGED,	TWO,		ONE },
		{ UNKNOWN,		UNKNOWN,	TWO,		ONE,		ONE,		TWO,		FLAGGED,	ONE },
		{ ONE,			TWO,		FLAGGED,	ONE,		ZERO,		ONE,		ONE,		ONE },
		{ ZERO,			ONE,		ONE,		ONE,		ZERO,		ZERO,		ZERO,		ZERO },
		{ ONE,			ONE,		ZERO,		ZERO,		ZERO,		ZERO,		ONE,		ONE },
		{ FLAGGED,		TWO,		ONE,		ZERO,		ZERO,		ZERO,		ONE,		FLAGGED },
		{ UNKNOWN,		FLAGGED,	ONE,		ZERO,		ZERO,		ZERO,		ONE,		ONE }
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_beginner_won_100) {
	Beginner beginner;
	ScreenReader scr(beginner, nullptr);

	std::string imageName = "beginner_won_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ ZERO,		ZERO,		ZERO,		ONE,		TWO,		FLAGGED,	TWO,		FLAGGED },
		{ ZERO,		ZERO,		ONE,		TWO,		FLAGGED,	TWO,		TWO,		ONE },
		{ ONE,		ONE,		TWO,		FLAGGED,	THREE,		TWO,		ONE,		ONE },
		{ ONE,		FLAGGED,	THREE,		THREE,		FLAGGED,	ONE,		ONE,		FLAGGED },
		{ ONE,		ONE,		TWO,		FLAGGED,	TWO,		TWO,		TWO,		TWO },
		{ ONE,		ONE,		TWO,		ONE,		ONE,		ONE,		FLAGGED,	ONE },
		{ ONE,		FLAGGED,	ONE,		ZERO,		ZERO,		ONE,		ONE,		ONE },
		{ ONE,		ONE,		ONE,		ZERO,		ZERO,		ZERO,		ZERO,		ZERO }
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_intermediate_init_100) {
	Intermediate intermediate;
	ScreenReader scr(intermediate, nullptr);

	std::string imageName = "intermediate_init_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN }
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_intermediate_ingame_100) {
	Intermediate intermediate;
	ScreenReader scr(intermediate, nullptr);

	std::string imageName = "intermediate_ingame_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ ZERO,		ONE,	  FLAGGED,	FLAGGED,  FLAGGED,	FLAGGED,  ONE,	    ZERO,	  ZERO,		ONE,	  FLAGGED,	FLAGGED,  FLAGGED,	ONE,	  ZERO,		ZERO },
		{ ONE,		TWO,	  TWO,		THREE,	  THREE,	TWO,	  ONE,      ZERO,	  ZERO,		ONE,	  TWO,		FOUR,	  THREE,	TWO,	  ZERO,		ZERO },
		{ FLAGGED,	ONE,	  ZERO,		ZERO,	  ZERO,		ZERO,	  ZERO,	    ZERO,	  ZERO,		ZERO,	  ONE,		THREE,	  FLAGGED,	TWO,	  ZERO,		ZERO },
		{ ONE,		ONE,	  ZERO,		ZERO,	  ONE,		ONE,	  ONE,	    ONE,	  ONE,		ONE,	  ONE,		FLAGGED,  FLAGGED,	TWO,	  ZERO,		ZERO },
		{ ZERO,		ZERO,	  ZERO,		ZERO,	  ONE,		FLAGGED,  TWO,	    TWO,	  FLAGGED,	ONE,	  ONE,		TWO,	  TWO,		ONE,	  ZERO,		ZERO },
		{ ZERO,		ZERO,	  ZERO,		ZERO,	  ONE,		TWO,	  FLAGGED,  TWO,	  ONE,		ONE,	  ZERO,		ZERO,	  ZERO,		ZERO,	  ONE,		ONE },
		{ ZERO,		ZERO,	  ONE,		TWO,	  THREE,	THREE,	  TWO,	    ONE,	  ZERO,		ZERO,	  ZERO,		ZERO,	  ZERO,		ZERO,	  TWO,		FLAGGED },
		{ ZERO,		ZERO,	  ONE,		FLAGGED,  FLAGGED,	FLAGGED,  ONE,	    ONE,	  ONE,		ONE,	  ZERO,		ZERO,	  ZERO,		ONE,	  THREE,	FLAGGED },
		{ ZERO,		ZERO,	  TWO,		THREE,	  FIVE,		THREE,	  TWO,	    ONE,	  FLAGGED,	ONE,	  ONE,		ONE,	  ONE,		ONE,	  FLAGGED,	TWO },
		{ ZERO,		ONE,	  TWO,		FLAGGED,  TWO,		FLAGGED,  ONE,	    ONE,	  ONE,		TWO,	  TWO,		FLAGGED,  TWO,		TWO,	  TWO,		TWO },
		{ ZERO,		ONE,	  FLAGGED,	THREE,	  UNKNOWN,  TWO,	  ONE,	    ZERO,	  ZERO,		ONE,	  FLAGGED,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN },
		{ ONE,		TWO,	  TWO,		UNKNOWN,  UNKNOWN,  ONE,	  ZERO,	    ONE,	  TWO,		THREE,	  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN },
		{ UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  ONE,	  ONE,	    THREE,	  FLAGGED,	FLAGGED,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN },
		{ UNKNOWN,	UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN },
		{ UNKNOWN,	UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN },
		{ UNKNOWN,	UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN,  UNKNOWN }
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_intermediate_won_100) {
	Intermediate intermediate;
	ScreenReader scr(intermediate, nullptr);

	std::string imageName = "intermediate_won_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ ZERO,     ONE,      FLAGGED,  FLAGGED,  ONE,      ONE,      FLAGGED,  ONE,      ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ONE,      ONE     },
		{ ZERO,     ONE,      TWO,      TWO,      ONE,      ONE,      ONE,      ONE,      ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ONE,      FLAGGED },
		{ ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ONE,      ONE     },
		{ ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ONE,      ONE,      TWO,      TWO,      TWO,      ONE,      ONE,      ONE,      ONE     },
		{ ONE,      ONE,      ZERO,     ONE,      ONE,      ONE,      ZERO,     ONE,      FLAGGED,  TWO,      FLAGGED,  FLAGGED,  TWO,      ONE,      FLAGGED,  ONE     },
		{ FLAGGED,  ONE,      ZERO,     ONE,      FLAGGED,  THREE,    TWO,      TWO,      ONE,      TWO,      FOUR,     FLAGGED,  FOUR,     TWO,      ONE,      ONE     },
		{ ONE,      ONE,      ONE,      TWO,      THREE,    FLAGGED,  FLAGGED,  TWO,      ONE,      ONE,      TWO,      FLAGGED,  FLAGGED,  ONE,      ZERO,     ZERO    },
		{ TWO,      TWO,      TWO,      FLAGGED,  THREE,    FOUR,     FIVE,     FOUR,     FLAGGED,  ONE,      ONE,      TWO,      TWO,      ONE,      ZERO,     ZERO    },
		{ FLAGGED,  FLAGGED,  FOUR,     TWO,      THREE,    FLAGGED,  FLAGGED,  FLAGGED,  TWO,      ONE,      ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ZERO    },
		{ THREE,    FLAGGED,  FLAGGED,  ONE,      THREE,    FLAGGED,  FIVE,     TWO,      TWO,      ONE,      ONE,      ZERO,     ZERO,     ZERO,     ZERO,     ZERO    },
		{ ONE,      TWO,      TWO,      ONE,      THREE,    FLAGGED,  THREE,    ZERO,     ONE,      FLAGGED,  ONE,      ZERO,     ONE,      ONE,      TWO,      ONE     },
		{ ZERO,     ZERO,     ONE,      ONE,      THREE,    FLAGGED,  THREE,    ONE,      TWO,      ONE,      ONE,      ZERO,     ONE,      FLAGGED,  TWO,      FLAGGED },
		{ ONE,      ONE,      TWO,      FLAGGED,  TWO,      TWO,      THREE,    FLAGGED,  TWO,      TWO,      ONE,      ONE,      TWO,      TWO,      THREE,    ONE     },
		{ ONE,      FLAGGED,  TWO,      ONE,      ONE,      TWO,      FLAGGED,  FOUR,     FLAGGED,  TWO,      FLAGGED,  ONE,      ONE,      FLAGGED,  TWO,      ONE     },
		{ ONE,      ONE,      ONE,      ZERO,     ZERO,     TWO,      FLAGGED,  THREE,    ONE,      TWO,      ONE,      ONE,      TWO,      TWO,      THREE,    FLAGGED },
		{ ZERO,     ZERO,     ZERO,     ZERO,     ZERO,     ONE,      ONE,      ONE,      ZERO,     ZERO,     ZERO,     ZERO,     ONE,      FLAGGED,  TWO,      ONE     }
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_expert_init_100) {
	Expert expert;
	ScreenReader scr(expert, nullptr);

	std::string imageName = "expert_init_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN },
		{ UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN }
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_expert_ingame_100) {
	Expert expert;
	ScreenReader scr(expert, nullptr);

	std::string imageName = "expert_ingame_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ZERO   ,ONE    ,FLAGGED,ONE    ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,FLAGGED,FLAGGED,ONE    ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,TWO},

		{ZERO   ,ONE    ,ONE    ,ONE    ,TWO    ,FLAGGED,TWO    ,ZERO   ,ONE    ,TWO    ,TWO    ,ONE    ,ZERO   ,ONE    ,UNKNOWN,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},

		{ZERO   ,ONE    ,ONE    ,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},

		{ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,TWO    ,UNKNOWN,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,THREE  ,ONE    ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},

		{ONE    ,THREE  ,TWO    ,TWO    ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,ONE    ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,ONE    ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},

		{FLAGGED,TWO    ,FLAGGED,TWO    ,THREE  ,TWO    ,THREE  ,TWO    ,FLAGGED,FLAGGED,TWO    ,ONE    ,TWO    ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,TWO    ,ONE    ,ZERO   ,ONE    ,UNKNOWN,TWO    ,ONE    ,ONE    ,FLAGGED,UNKNOWN,UNKNOWN},

		{ONE    ,TWO    ,TWO    ,FLAGGED,TWO    ,FLAGGED,TWO    ,FLAGGED,FOUR   ,FLAGGED,THREE  ,TWO    ,FLAGGED,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,TWO    ,ZERO   ,ONE    ,TWO    ,FLAGGED,ONE    ,ZERO   ,ONE    ,ONE    ,UNKNOWN,UNKNOWN},

		{ZERO   ,ZERO   ,ONE    ,TWO    ,FOUR   ,FOUR   ,FOUR   ,TWO    ,TWO    ,TWO    ,UNKNOWN,UNKNOWN,TWO    ,UNKNOWN,UNKNOWN,FOUR   ,THREE  ,THREE  ,FLAGGED,TWO    ,ZERO   ,ONE    ,FLAGGED,TWO    ,ONE    ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN},

		{ZERO   ,ZERO   ,ONE    ,TWO    ,FLAGGED,FLAGGED,FLAGGED,ONE    ,ONE    ,THREE  ,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,TWO    ,TWO    ,THREE  ,FOUR   ,TWO    ,TWO    ,ONE    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ONE    ,UNKNOWN,UNKNOWN},

		{ZERO   ,ZERO   ,ONE    ,FLAGGED,THREE  ,THREE  ,THREE  ,TWO    ,TWO    ,FLAGGED,FLAGGED,UNKNOWN,UNKNOWN,THREE  ,FOUR   ,FLAGGED,FOUR   ,THREE  ,FLAGGED,FLAGGED,FLAGGED,TWO    ,TWO    ,THREE  ,TWO    ,ONE    ,ONE    ,TWO    ,UNKNOWN,UNKNOWN},

		{ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,ONE    ,TWO    ,FLAGGED,TWO    ,THREE  ,UNKNOWN,UNKNOWN,THREE  ,TWO    ,ONE    ,TWO    ,FLAGGED,FLAGGED,THREE  ,THREE  ,TWO    ,TWO    ,FLAGGED,FLAGGED,FLAGGED,ONE    ,ONE    ,FLAGGED,UNKNOWN,UNKNOWN},

		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,FLAGGED,THREE  ,THREE  ,FOUR   ,THREE  ,UNKNOWN,UNKNOWN,FLAGGED,TWO    ,ZERO   ,ONE    ,TWO    ,TWO    ,TWO    ,ONE    ,ONE    ,ONE    ,TWO    ,THREE  ,TWO    ,ONE    ,ONE    ,ONE    ,TWO    ,ONE},

		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,THREE  ,FLAGGED,FLAGGED,FLAGGED,TWO    ,THREE  ,FLAGGED,THREE  ,ONE    ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,ONE    ,ONE    ,TWO    ,TWO    ,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO},

		{ZERO   ,ZERO   ,ZERO   ,ZERO   ,ONE    ,ONE    ,FOUR   ,FLAGGED,FIVE   ,TWO    ,ONE    ,TWO    ,TWO    ,FOUR   ,FLAGGED,THREE  ,ONE    ,TWO    ,THREE  ,THREE  ,TWO    ,ONE    ,FLAGGED,FLAGGED,ONE    ,ZERO   ,ZERO   ,ZERO   ,ZERO   ,ZERO},

		{ZERO   ,ZERO   ,ONE    ,ONE    ,TWO    ,FLAGGED,THREE  ,FLAGGED,TWO    ,ONE    ,ONE    ,TWO    ,FLAGGED,FOUR   ,FLAGGED,FIVE   ,FLAGGED,FOUR   ,FLAGGED,FLAGGED,ONE    ,ONE    ,TWO    ,THREE  ,TWO    ,TWO    ,ONE    ,TWO    ,ONE    ,ONE},

		{ZERO   ,ZERO   ,ONE    ,FLAGGED,TWO    ,ONE    ,TWO    ,ONE    ,ONE    ,ONE    ,FLAGGED,TWO    ,ONE    ,THREE  ,FLAGGED,UNKNOWN,UNKNOWN,UNKNOWN,FLAGGED,THREE  ,ONE    ,ZERO   ,ZERO   ,ONE    ,FLAGGED,TWO    ,UNKNOWN,TWO    ,FLAGGED,ONE}

	};

	EXPECT_EQ(minefield, minefieldTest);
};


TEST(ScreenReader, readMinefield_expert_won_100) {
	Expert expert;
	ScreenReader scr(expert, nullptr);

	std::string imageName = "expert_won_100.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.00, true);
	std::vector<std::vector<Square>> minefieldTest =
	{
		{ ZERO   , ZERO   , ONE    , TWO    , FLAGGED, TWO    , TWO    , ONE    , ONE    , ONE    , FLAGGED, ONE    , ZERO   , ZERO   , ZERO   , ONE    , ONE    , ONE    , ZERO   , ZERO   , ONE    , FLAGGED, FLAGGED, ONE    , ZERO   , ZERO   , ZERO   , ONE    , ONE    , ONE     },
		{ ZERO   , ZERO   , ONE    , FLAGGED, THREE  , FLAGGED, THREE  , FLAGGED, THREE  , TWO    , THREE  , TWO    , ONE    , ZERO   , ZERO   , TWO    , FLAGGED, TWO    , ZERO   , ONE    , TWO    , FOUR   , THREE  , TWO    , ZERO   , ZERO   , ZERO   , ONE    , FLAGGED, ONE     },
		{ ZERO   , ZERO   , ONE    , ONE    , TWO    , TWO    , FOUR   , FLAGGED, THREE  , FLAGGED, TWO    , FLAGGED, ONE    , ZERO   , ZERO   , THREE  , FLAGGED, FOUR   , ONE    , ONE    , FLAGGED, TWO    , FLAGGED, ONE    , ONE    , ONE    , ONE    , ONE    , ONE    , ONE     },
		{ ZERO   , ONE    , ONE    , ONE    , ZERO   , ONE    , FLAGGED, THREE  , FOUR   , THREE  , THREE  , ONE    , TWO    , ONE    , ONE    , TWO    , FLAGGED, FLAGGED, ONE    , ONE    , ONE    , TWO    , ONE    , ONE    , TWO    , FLAGGED, TWO    , ONE    , ONE    , ONE     },
		{ ZERO   , ONE    , FLAGGED, ONE    , ZERO   , TWO    , THREE  , FOUR   , FLAGGED, FLAGGED, TWO    , ONE    , THREE  , FLAGGED, TWO    , ONE    , TWO    , TWO    , ONE    , ONE    , ONE    , ONE    , ZERO   , ZERO   , TWO    , FLAGGED, TWO    , TWO    , FLAGGED, THREE   },
		{ ONE    , TWO    , THREE  , TWO    , TWO    , TWO    , FLAGGED, FLAGGED, THREE  , TWO    , THREE  , FLAGGED, FOUR   , FLAGGED, TWO    , ZERO   , ONE    , ONE    , ONE    , ONE    , FLAGGED, ONE    , ONE    , ONE    , THREE  , TWO    , THREE  , THREE  , FLAGGED, FLAGGED },
		{ TWO    , FLAGGED, FOUR   , FLAGGED, TWO    , FLAGGED, THREE  , TWO    , ONE    , ZERO   , TWO    , FLAGGED, FOUR   , TWO    , THREE  , ONE    , TWO    , FLAGGED, ONE    , ONE    , TWO    , THREE  , FOUR   , FLAGGED, FIVE   , FLAGGED, FOUR   , FLAGGED, FOUR   , TWO     },
		{ TWO    , FLAGGED, FLAGGED, TWO    , THREE  , THREE  , THREE  , ONE    , ZERO   , ONE    , TWO    , TWO    , TWO    , FLAGGED, THREE  , FLAGGED, THREE  , ONE    , ONE    , ZERO   , ONE    , FLAGGED, FLAGGED, FLAGGED, FLAGGED, FLAGGED, FOUR   , FLAGGED, TWO    , ZERO    },
		{ ONE    , TWO    , TWO    , ONE    , ONE    , FLAGGED, FLAGGED, TWO    , ZERO   , ONE    , FLAGGED, TWO    , THREE  , THREE  , FIVE   , FLAGGED, FOUR   , TWO    , TWO    , ONE    , ONE    , THREE  , FLAGGED, FOUR   , THREE  , TWO    , THREE  , TWO    , THREE  , ONE     },
		{ ZERO   , ZERO   , ZERO   , ZERO   , TWO    , FIVE   , FLAGGED, FOUR   , TWO    , TWO    , TWO    , TWO    , FLAGGED, FLAGGED, FOUR   , FLAGGED, FOUR   , FLAGGED, FLAGGED, TWO    , ZERO   , ONE    , ONE    , ONE    , ZERO   , ZERO   , ONE    , FLAGGED, TWO    , FLAGGED },
		{ ZERO   , ZERO   , ZERO   , ONE    , TWO    , FLAGGED, FLAGGED, FLAGGED, TWO    , FLAGGED, ONE    , ONE    , TWO    , TWO    , THREE  , FLAGGED, THREE  , THREE  , FLAGGED, THREE  , ONE    , TWO    , ONE    , ONE    , ZERO   , ZERO   , ONE    , ONE    , TWO    , ONE     },
		{ ZERO   , ZERO   , ZERO   , ONE    , FLAGGED, FOUR   , FIVE   , THREE  , THREE  , TWO    , TWO    , ONE    , ZERO   , ZERO   , TWO    , TWO    , TWO    , ONE    , ONE    , TWO    , FLAGGED, TWO    , FLAGGED, ONE    , ZERO   , ZERO   , ZERO   , ZERO   , ZERO   , ZERO    },
		{ ZERO   , ZERO   , ONE    , TWO    , THREE  , FLAGGED, TWO    , FLAGGED, TWO    , THREE  , FLAGGED, TWO    , ZERO   , ZERO   , ONE    , FLAGGED, TWO    , TWO    , TWO    , TWO    , TWO    , THREE  , TWO    , ONE    , ZERO   , ZERO   , ZERO   , ONE    , ONE    , ONE     },
		{ ONE    , ONE    , TWO    , FLAGGED, THREE  , THREE  , THREE  , THREE  , FLAGGED, THREE  , FLAGGED, TWO    , ZERO   , ZERO   , ONE    , ONE    , THREE  , FLAGGED, FLAGGED, TWO    , TWO    , FLAGGED, ONE    , ZERO   , ZERO   , ZERO   , ZERO   , TWO    , FLAGGED, TWO     },
		{ ONE    , FLAGGED, THREE  , FOUR   , FLAGGED, THREE  , FLAGGED, FOUR   , THREE  , FOUR   , THREE  , THREE  , ONE    , ZERO   , ZERO   , ONE    , FOUR   , FLAGGED, FIVE   , FLAGGED, THREE  , TWO    , TWO    , ZERO   , ZERO   , ONE    , ONE    , THREE  , FLAGGED, TWO     },
		{ ONE    , TWO    , FLAGGED, THREE  , FLAGGED, THREE  , TWO    , FLAGGED, FLAGGED, TWO    , FLAGGED, FLAGGED, ONE    , ZERO   , ZERO   , ONE    , FLAGGED, FLAGGED, THREE  , ONE    , TWO    , FLAGGED, ONE    , ZERO   , ZERO   , ONE    , FLAGGED, TWO    , ONE    , ONE     }
	};

	EXPECT_EQ(minefield, minefieldTest);
};



//125% SCREEN MAGNIFICATION
TEST(ScreenReader, readMinefield_beginner_init_125) {
	Beginner beginner;
	ScreenReader scr(beginner, nullptr);

	std::string imageName = "beginner_init_125.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.25, true);
	std::vector<std::vector<Square>> minefieldTest = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};

	EXPECT_EQ(minefield, minefieldTest);
};

TEST(ScreenReader, readMinefield_beginner_ingame_125) {
	Beginner beginner;
	ScreenReader scr(beginner, nullptr);

	std::string imageName = "beginner_ingame_125.png";
	std::vector<std::vector<Square>> minefield = scr.readMinefield(imageName, 1.25, true);
	std::vector<std::vector<Square>> minefieldTest = {
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN},
		{UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN}
	};

	EXPECT_EQ(minefield, minefieldTest);
};
